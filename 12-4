using UnityEngine;
using System.Collections;
using System;
using static UnityEngine.GraphicsBuffer;
using System.Collections.Generic;

// A very simplistic car driving on the x-z plane.
//currently this code drive the car according to the arrowkeys.

public class Drive : MonoBehaviour
{

    //public GameObject enemy;
   // public GameObject myPlayer2;
    public float speed;//scalar
    private Vector2 direction = new Vector2(0.0f, 0.1f);//9/17
    private Vector2 directionU = new Vector2(0.0f, 0.1f);//x y directions for up
    //private Vector2 directionD = new Vector2(0.0f, -0.1f);//x y directionsv for down//commented out to support nesting
    private Vector2 directionR = new Vector2(0.1f, 0.0f);//x y directions for left
                                                         //private Vector2 directionL = new Vector2(0.1f, 0.0f);//x y directions for right//commented out to support nesting <-I think
    private Vector3 bump =new Vector3(-4.0f,0.0f,0.0f);
    private Vector3 bumpUp = new Vector3(0.0f, 4.0f, 0.0f);
    private Vector3 bumpLeft = new Vector3(-4.0f, 0.0f, 0.0f);
    private Vector3 bumpRight = new Vector3(4.0f, 0.0f, 0.0f);
    private Vector3 bumpDown = new Vector3(0.0f, -4.0f, 0.0f);
    private List<GameObject> zombies = new List<GameObject>();  // List to store zombies
    private Vector3 collide=new Vector3(1.0f,1.0f,0.0f);
    public float positionThreshold = 1.0f;//was 0.1f
    public Player player;
   // public Zombie zombie;
    
    private KeyCode lastKeyPressed;
    public GameObject punch;

    private void Start()//Unused for now
    {
        // speed = 0.1f;//f indicates floating point value
        //direction = enemy.transform.position - this.transform.position;//vector//duh//9/17
        //Coords vecCoordinates = MyMath.Normalize(new Coords(direction));//9/17
        //Coords dirNormal = MyMath.Normalize(vecCoordinates);//9/17
        Coords vectorUp = new Coords(0, 1, 0);//9/19
        //float angle = MyMath.Angle(dirNormal, vectorUp);//9/19
        //Debug.Log("Angle in degrees" + 180 / Mathf.PI * angle);//9/19
        zombies.AddRange(ZManager.instance.enemies);

        /*if (zombie == null)
         {
             zombie = GameObject.FindWithTag("zom").GetComponent<Zombie>(); // Find the player by tag and get the Player component
             if (zombie == null)
             {
                 Debug.LogError("Z not found! Make sure an object with the 'zom' tag and a Z component exists.");
                 return;
             }
         }*/




        //Player player = new Player();
    }

    void Update()
    {
        // Vector3 direction = enemy.transform.position - this.transform.position;//vector
        //this.transform.position=this.transform.position + speed*direction;//He has been making many changes

        //if (enemy.transform.position == this.transform.position)

        // collide=enemy.transform.position - this.transform.position;
        // if (collide ==Vector3.zero
        
      




        Vector3 position = this.transform.position;
        if (Input.GetKey(KeyCode.W))
        {//was space
            //position.x = position.x + directionU.x;//unnecessarey
            position.y = position.y + directionU.y;
            lastKeyPressed = KeyCode.W;

        }
        if (Input.GetKey(KeyCode.S))//Using elseif removes the ability to move diagonally
        {
            position.y = position.y - directionU.y;//instead of its own direction I just subtracted the down direction
            lastKeyPressed = KeyCode.S;
        }
        if (Input.GetKey(KeyCode.A))
        {
            position.x = position.x - directionR.x;//instead of its own direction I just subtracted the right direction
            lastKeyPressed = KeyCode.A; // position.y = position.y + directionR.y;//unnecessarey
        }
        if (Input.GetKey(KeyCode.D))
        {
            position.x = position.x + directionR.x;
            lastKeyPressed = KeyCode.D;
        }
        this.transform.position = position;

        //Vector3 punchPosition = new Vector3(0, 0, 0);
        //GameObject punchObject;
        // Handle punching action when the I key is pressed
        if (Input.GetKey(KeyCode.I))
        {
            Vector3 punchPosition = new Vector3(0, 0, 0);
            GameObject punchObject = Instantiate(punch, punchPosition, Quaternion.identity);
            //punchObject = punchObject2;
            // Determine punch position based on last key pressed (player direction)
            if (lastKeyPressed == KeyCode.D)
            {
                punchPosition = position + bumpRight;
            }
            if (lastKeyPressed == KeyCode.W)
            {
                punchPosition = position + bumpUp;
            }
            if (lastKeyPressed == KeyCode.S)
            {
                punchPosition = position + bumpDown;
            }
            if (lastKeyPressed == KeyCode.A)
            {
                punchPosition = position + bumpLeft;
            }
            punchObject.transform.position = punchPosition;
            Destroy(punchObject, 0.5f);
            foreach (GameObject enemy in zombies)
            {
                Zombie zombie = enemy.GetComponent<Zombie>();

                if (zombie != null)
                {
                    // Check if the punch hits the zombie (within distance threshold)
                    if (Vector3.Distance(punchObject.transform.position, enemy.transform.position) <= positionThreshold && (punchObject.transform.position.x < enemy.transform.position.x))
                    {
                        Debug.Log("Punch hit zombie: " + enemy.name);

                        // Remove zombie from the zombie list and delete it
                        zombie.transform.position = zombie.transform.position + bumpRight;
                        zombie.health -= 1;
                        if (zombie.health == 0)
                        {
                            ZManager.instance.UnregisterEnemy(enemy);
                            Destroy(enemy);  // Destroy the zombie GameObject
                        }
                    }
                    if (Vector3.Distance(punchObject.transform.position, enemy.transform.position) <= positionThreshold && (punchObject.transform.position.x > enemy.transform.position.x))
                    {
                        Debug.Log("Punch hit zombie: " + enemy.name);

                        // Remove zombie from the zombie list and delete it
                        zombie.transform.position = zombie.transform.position + bumpLeft;
                        zombie.health -= 1;
                        if (zombie.health == 0)
                        {
                            ZManager.instance.UnregisterEnemy(enemy);
                            Destroy(enemy);  // Destroy the zombie GameObject
                        }
                    }
                }
            }


        }

       

        // Instantiate the punch object at the determined position
            

        // Check for collisions with zombies
        

            // Destroy the punch object after a short delay
            
        
        
    }

}
